import React, { useState } from 'react';
import axios from 'axios';
import './Home.css';

const WeatherApp = () => {
  const [city, setCity] = useState('');
  const [weather, setWeather] = useState(null);
  const [error, setError] = useState('');

  const handleCityChange = (e) => {
    setCity(e.target.value);
  };

  const handleSearch = async () => {
    setError('');
    if (!city) {
      setError('Please enter city name!');
      return;
    }

    try {
      const response = await axios.get(`https://myweatherapi-4fcs.onrender.com/api/get-weather-at?city=${city}`);
      setWeather(response.data);
    } catch (err) {
      setError('Unable to get weather information, please try again!');
      console.error(err);
    }
  };

  const getWeatherIcon = (weatherCondition, time) => {
    if (!weatherCondition) return '';
  
    // M√£ h√≥a ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt th√†nh bi·ªÉu t∆∞·ª£ng t∆∞∆°ng ·ª©ng
    const iconMapping = {
      day: {
        'clear sky': 'üåû',         // Clear sky
        'few clouds': 'üå§Ô∏è',       // Few clouds
        'scattered clouds': '‚õÖ',  // Scattered clouds
        'broken clouds': '‚òÅÔ∏è',     // Broken clouds
        'overcast clouds': '‚òÅÔ∏è',   // Overcast clouds
        'shower rain': 'üåßÔ∏è',      // Shower rain
        'rain': 'üåßÔ∏è',             // Rain
        'thunderstorm': 'üå©Ô∏è',     // Thunderstorm
        'snow': '‚ùÑÔ∏è',              // Snow
        'mist': 'üå´Ô∏è',             // Mist
        'light rain': 'üå¶Ô∏è',       // Light rain
        'light snow': 'üå®Ô∏è',       // Light snow
        'drizzle': 'üå¶Ô∏è',          // Drizzle
        'heavy rain': 'üåßÔ∏è',       // Heavy rain
        'heavy snow': '‚ùÑÔ∏è',     // Heavy snow
        'fog': 'üå´Ô∏è',
        'default': 'üåû'            // Bi·ªÉu t∆∞·ª£ng m·∫∑c ƒë·ªãnh ban ng√†y
      },
      night: {
        'clear sky': 'üåï',         // Clear sky (full moon)
        'few clouds': 'üåô',     // Few clouds at night
        'scattered clouds': 'üåô', // Scattered clouds at night
        'broken clouds': '‚òÅÔ∏è',     // Broken clouds (same as day)
        'overcast clouds': '‚òÅÔ∏è',
        'shower rain': 'üåßÔ∏è',
        'rain': 'üåßÔ∏è',
        'thunderstorm': 'üå©Ô∏è',
        'snow': '‚ùÑÔ∏è',
        'mist': 'üå´Ô∏è',
        'light rain': 'üå¶Ô∏è',     // Light rain at night
        'light snow': 'üå®Ô∏è',     // Light snow at night
        'drizzle': 'üå¶Ô∏è',        // Drizzle at night
        'heavy rain': 'üåßÔ∏è',
        'heavy snow': '‚ùÑÔ∏è‚ùÑÔ∏è',
        'fog': 'üå´Ô∏è',
        'default': 'üåô'          // Bi·ªÉu t∆∞·ª£ng m·∫∑c ƒë·ªãnh ban ƒë√™m
      }
    };
  
    // X√°c ƒë·ªãnh l√† ban ng√†y hay ban ƒë√™m
    // X√°c ƒë·ªãnh ng√†y ho·∫∑c ƒë√™m d·ª±a tr√™n gi·ªù
    const isDay = time >= 6 && time < 18; // Ng√†y t·ª´ 6h s√°ng ƒë·∫øn 18h t·ªëi
    const weatherIcons = isDay || time == null ? iconMapping.day : iconMapping.night;
    
    // Tr·∫£ v·ªÅ bi·ªÉu t∆∞·ª£ng t∆∞∆°ng ·ª©ng, n·∫øu kh√¥ng c√≥ s·∫Ω tr·∫£ v·ªÅ bi·ªÉu t∆∞·ª£ng m·∫∑c ƒë·ªãnh
    return weatherIcons[weatherCondition.toLowerCase()] || weatherIcons['default'];
  };
  const getWeekday = (date) => {
    if (!date) return ''; // Ki·ªÉm tra xem date c√≥ h·ª£p l·ªá kh√¥ng
    const days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    const day = new Date(date).getDay();
    return days[day];  // Tr·∫£ v·ªÅ th·ª© trong tu·∫ßn
  };

  // H√†m ƒë·ªÉ ƒë·ªãnh d·∫°ng ng√†y th√°ng
  const formatDate = (date) => {
    if (!date) return ''; // Ki·ªÉm tra xem date c√≥ h·ª£p l·ªá kh√¥ng
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    const formattedDate = new Date(date).toLocaleDateString("en-US", options);
    return formattedDate;
  };
  // H√†m tr·∫£ v·ªÅ b·ªô m√†u t∆∞∆°ng ·ª©ng v·ªõi nhi·ªát ƒë·ªô
// H√†m tr·∫£ v·ªÅ b·ªô m√†u t∆∞∆°ng ·ª©ng v·ªõi nhi·ªát ƒë·ªô
const getColorByTemperature = (temp) => {
  const temperatureColors = {
    // C·ª±c l·∫°nh (-10 ƒë·∫øn -5)
    '-10': '#0277bd', '-9': '#0277bd', '-8': '#0277bd', '-7': '#0277bd', '-6': '#0277bd', '-5': '#0288d1',
  
    // R·∫•t l·∫°nh (-4 ƒë·∫øn 0)
    '-4': '#0288d1', '-3': '#0288d1', '-2': '#0288d1', '-1': '#0288d1', '0': '#2196f3',
  
    // L·∫°nh ƒë·∫≠m (1 ƒë·∫øn 5)
    '1': '#388e3c', '2': '#388e3c', '3': '#388e3c', '4': '#388e3c', '5': '#388e3c',
  
    // L·∫°nh (6 ƒë·∫øn 10)
    '6': '#8bc34a', '7': '#8bc34a', '8': '#8bc34a', '9': '#8bc34a', '10': '#8bc34a',
  
    // M√°t (11 ƒë·∫øn 15)
    '11': '#cddc39', '12': '#cddc39', '13': '#cddc39', '14': '#cddc39', '15': '#cddc39',
  
    // ·∫§m (16 ƒë·∫øn 20)
    '16': '#fbc02d', '17': '#fbc02d', '18': '#fbc02d', '19': '#fbc02d', '20': '#fbc02d',
  
    // N√≥ng (21 ƒë·∫øn 25)
    '21': '#ff9800', '22': '#ff9800', '23': '#ff9800', '24': '#ff9800', '25': '#ff9800',
  
    // R·∫•t n√≥ng (26 ƒë·∫øn 30)
    '26': '#f57c00', '27': '#f57c00', '28': '#f57c00', '29': '#f57c00', '30': '#f57c00',
  
    // C·ª±c n√≥ng (31 ƒë·∫øn 45)
    '31': '#ff5722', '32': '#ff5722', '33': '#ff5722', '34': '#ff5722', '35': '#ff5722',
    '36': '#e53935', '37': '#e53935', '38': '#e53935', '39': '#e53935', '40': '#e53935',
    '41': '#d32f2f', '42': '#d32f2f', '43': '#d32f2f', '44': '#d32f2f', '45': '#b71c1c'
  };
  temp = parseInt(temp);
  // Ki·ªÉm tra n·∫øu nhi·ªát ƒë·ªô c√≥ trong dictionary v√† tr·∫£ v·ªÅ b·ªô m√†u
  if (temp < -10) {
    return temperatureColors['-10']; // Tr·∫£ v·ªÅ m√†u cho nhi·ªát ƒë·ªô th·∫•p nh·∫•t
  } else if(temp > 45){
    return temperatureColors['45']; // Tr·∫£ v·ªÅ m√†u cho nhi·ªát ƒë·ªô cao nh·∫•t
  } else {
    return temperatureColors[temp] || '#ffffff'; // Tr·∫£ v·ªÅ m√†u m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ nhi·ªát ƒë·ªô ch√≠nh x√°c
  }
}
  // H√†m t√≠nh to√°n v√† thay ƒë·ªïi m√†u n·ªÅn theo nhi·ªát ƒë·ªô
  const setBackgroundColorByTemperature = (temp1,temp2) => {
    // ƒê·∫∑t m√†u n·ªÅn d·ª±a tr√™n nhi·ªát ƒë·ªô
    return `linear-gradient(45deg, ${getColorByTemperature(temp1)}, ${getColorByTemperature(temp2)})`; // M√†u l·∫°nh (xanh d∆∞∆°ng) 
  }
  const splitRange = (range) => {
    const [start, end] = range.split('-').map(Number); // T√°ch chu·ªói v√† chuy·ªÉn th√†nh s·ªë
    return { start, end }; // Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng ch·ª©a hai s·ªë
  };
  return (
    <div className="weather-app">
      <h1>Weather Forecast App</h1>
      
      <div className="search-box">
        <input
          type="text"
          value={city}
          onChange={handleCityChange}
          placeholder="Nh·∫≠p t√™n th√†nh ph·ªë..."
        />
        <button onClick={handleSearch}>Search</button>
      </div>

      {error && <div className="error-message">{error}</div>}

      {weather && (
        <div className="weather-info">
          <h2>{weather.city}</h2>

          {/* Th·ªùi ti·∫øt hi·ªán t·∫°i */}
          <div className="current-weather" style={{ background: setBackgroundColorByTemperature(weather.current.temp, weather.current.temp) }}>
            <p className="temperature">{weather.current.temp}¬∞C</p>
            <span className="weather-icon">{getWeatherIcon(weather.current.weather,weather.current.time)}</span>
          </div>
          {/* D·ª± b√°o theo gi·ªù */}
          <div className="hourly-forecast">
            <h3>Hourly Forecast</h3>
            <div className="hourly-list">
              {weather.hourly.map((hour, index) => (
                <div key={index} className="hourly-item" style={{ background: setBackgroundColorByTemperature(hour.temp, hour.temp) }}>
                  <p className="hour-time">{hour.time}</p>
                  <span class="weather-icon">{getWeatherIcon(hour.weather,hour.time)}</span>
                  <p className="hour-temp">
                    {hour.temp}¬∞C 
                  </p>
      
                </div>
              ))}
            </div>
          </div>

          {/* D·ª± b√°o theo ng√†y */}
          <div className="daily-forecast">
            <h3>Forecast for the next 5 days</h3>
            <div className="daily-list">
              {weather.daily.map((day, index) => (
                <div key={index} className="daily-item" style={{ background: setBackgroundColorByTemperature(parseInt(splitRange(day.temp).start), parseInt(splitRange(day.temp).end)) }}>
                  <p className="weekday">{getWeekday(day.date)}</p>  {/* Th√™m th·ª© trong tu·∫ßn */}
                  <p className="datedate">{formatDate(day.date)}</p>  {/* ƒê·ªãnh d·∫°ng ng√†y th√°ng */}
                  <p className="temperature">{splitRange(day.temp).start}¬∞C   to  {splitRange(day.temp).end}¬∞C</p>  {/* Nhi·ªát ƒë·ªô */}
                  <span className="weather-icon">{getWeatherIcon(day.weather,null)}</span>  {/* Bi·ªÉu t∆∞·ª£ng th·ªùi ti·∫øt */}
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default WeatherApp;
